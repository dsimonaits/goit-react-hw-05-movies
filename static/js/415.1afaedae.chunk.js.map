{"version":3,"file":"static/js/415.1afaedae.chunk.js","mappings":"qOAEaA,EAAgBC,EAAAA,GAAAA,GAAS,sYAkBzBC,EAAaD,EAAAA,GAAAA,GAAS,6CAItBE,EAAWF,EAAAA,GAAAA,IAAU,2F,kBCiBlC,EAnCkB,SAAH,GAAoB,IAAdG,EAAM,EAANA,OAEbC,GAAWC,EAAAA,EAAAA,MAGjB,OACEF,IACE,8BACGA,EAAOG,KAAI,YAAiD,IAA9CC,EAAE,EAAFA,GAAIC,EAAW,EAAXA,YAAaC,EAAI,EAAJA,KAAMC,EAAK,EAALA,MAChCC,GAD+C,EAARC,SACvB,OAAJH,QAAI,IAAJA,EAAAA,EAAQC,GAElBG,EAAUL,EARP,mCAQ0CA,EAArBM,EAAAA,EAExBC,EAAaR,EAAGS,WACtB,OACE,SAACjB,EAAa,WACZ,UAAC,KAAI,CACHkB,GACwB,YAAtBb,EAASc,SAAsB,UACxBH,GAAU,iBACHA,GAEhBI,MAAO,CAAEC,KAAMhB,GAAW,WAE1B,SAACF,EAAQ,CAACmB,MAAM,MAAMC,IAAKT,EAAQU,IAAKd,EAAMe,QAAQ,UACtD,SAACvB,EAAU,UAAEU,QAVGJ,EAcxB,KAIR,ECrCakB,EAAmBzB,EAAAA,GAAAA,GAAS,mICYzC,EATmB,SAAH,GAAoB,IAAdG,EAAM,EAANA,OACpB,OACE,SAACsB,EAAgB,WACf,SAAC,EAAS,CAACtB,OAAQA,KAIzB,C,iICgEA,UAlEa,WACX,OAA4BuB,EAAAA,EAAAA,UAAS,QAAO,eAArCC,EAAM,KAAEC,EAAS,KACxB,GAA4CF,EAAAA,EAAAA,UAAS,IAAG,eAAjDG,EAAc,KAAEC,EAAiB,KAExC,GAAwBJ,EAAAA,EAAAA,UAAS,GAAE,eAA5BK,EAAI,KAAEC,EAAO,KAEdC,GAAgBC,EAAAA,EAAAA,SAAO,IAE7BC,EAAAA,EAAAA,YAAU,WAER,GADAP,EAAU,QACNK,EAAcG,QAChBH,EAAcG,SAAU,MAD1B,CAKAC,EAAAA,GACuBN,GACpBO,MAAK,YAAkB,IAAfC,EAAO,EAAPA,QACgB,IAAnBA,EAAQC,OACVZ,EAAU,YAEVA,EAAU,WAGZE,GAAkB,SAAAW,GAChB,IAAMC,EAAiB,GACjBC,EAAgBF,EAAUnC,KAAI,SAAAsC,GAAG,OAAIA,EAAIrC,EAAE,IASjD,OARAgC,EAAQjC,KAAI,SAAAuC,GAKV,OAJKF,EAAcG,SAASD,EAAOtC,KACjCmC,EAAeK,KAAKF,GAEtBjB,EAAU,YACHc,CACT,IAEM,GAAN,eAAWD,GAAcC,EAC3B,GACF,IACCM,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAM,IACjCG,UAzB+BC,EAAAA,QAAAA,SA4BlCA,EAAAA,QAAAA,QA7BA,CA8BF,GAAG,CAACtB,IAMJ,OACE,SAAC,IAAO,WACN,UAAC,IAAS,YACR,SAAC,IAAW,CAACuB,KAAK,cACjBzB,IACC,iCACE,SAAC,UAAU,CAAC1B,OAAQ0B,IACR,aAAXF,IACC,SAAC,IAAG,CAAC2B,KAAK,YAAYC,eAZjB,WACfvB,EAAQD,EAAO,EACjB,WAiBF,C","sources":["components/MovieCard/MovieCard.styled.js","components/MovieCard/MovieCard.jsx","components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","pages/Home.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MovieCardItem = styled.li`\n  font-size: 12px;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1) 0s;\n\n  &:hover {\n    transform: scale(1.05);\n  }\n\n  flex-basis: calc((90% -4 * 15px) / 2);\n\n  @media screen and (min-width: 768px) {\n    flex-basis: calc((100% - 8 * 15px) / 4);\n  }\n  @media screen and (min-width: 1200px) {\n    flex-basis: calc((100% - 8 * 15px) / 5);\n  }\n`;\n\nexport const MovieTitle = styled.h3`\n  margin-top: 10px;\n`;\n\nexport const MovieImg = styled.img`\n  min-width: 200px;\n  min-height: 300px;\n  border-radius: 15px;\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport { MovieCardItem } from './MovieCard.styled';\nimport { MovieTitle } from './MovieCard.styled';\nimport { MovieImg } from './MovieCard.styled';\nimport { noImage } from 'images/noImage';\nimport PropTypes from 'prop-types';\nconst MovieCard = ({ movies }) => {\n  // const [imageLoaded, setImageLoaded] = useState(false);\n  const location = useLocation();\n  const imageUrl = 'https://image.tmdb.org/t/p/w500/';\n\n  return (\n    movies && (\n      <>\n        {movies.map(({ id, poster_path, name, title, overview }) => {\n          let movieName = name ?? title;\n\n          const imgSrc = !poster_path ? noImage : imageUrl + poster_path;\n\n          const idToString = id.toString();\n          return (\n            <MovieCardItem key={id}>\n              <Link\n                to={\n                  location.pathname === '/movies'\n                    ? `${idToString}`\n                    : `movies/${idToString}`\n                }\n                state={{ from: location }}\n              >\n                <MovieImg width=\"200\" src={imgSrc} alt={name} loading=\"lazy\" />\n                <MovieTitle>{movieName}</MovieTitle>\n              </Link>\n            </MovieCardItem>\n          );\n        })}\n      </>\n    )\n  );\n};\n\nexport default MovieCard;\n\nMovieCard.propTypes = {\n  movies: PropTypes.oneOfType([PropTypes.array, PropTypes.object]).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const MoviesListStyled = styled.ul`\n  margin-top: 20px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 30px;\n  justify-content: space-around;\n`;\n","import PropTypes from 'prop-types';\nimport MovieCard from 'components/MovieCard/MovieCard';\nimport { MoviesListStyled } from './MoviesList.styled';\n// import Btn from 'components/Btn/Btn';\n\nconst MoviesList = ({ movies }) => {\n  return (\n    <MoviesListStyled>\n      <MovieCard movies={movies} />\n      {/* <Btn text=\"Load more\" /> */}\n    </MoviesListStyled>\n  );\n};\n\nexport default MoviesList;\n\nMoviesList.propTypes = {\n  movies: PropTypes.oneOfType([PropTypes.array, PropTypes.object]).isRequired,\n};\n","import * as moviesApi from '../services/movies-api';\nimport { useState, useEffect } from 'react';\nimport Section from 'components/Section/Section';\nimport { Loading } from 'notiflix/build/notiflix-loading-aio';\nimport PageHeading from 'components/PageHeading/PageHeading';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport Container from 'components/Container/Container';\nimport Btn from 'components/Btn/Btn';\nimport { useRef } from 'react';\n\nconst Home = () => {\n  const [status, setStatus] = useState('idle');\n  const [trendingMovies, setTrendingMovies] = useState([]);\n\n  const [page, setPage] = useState(1);\n\n  const isFirstRender = useRef(true);\n\n  useEffect(() => {\n    setStatus('idle');\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    const trendingMoviesFetch = () => Loading.circle();\n    moviesApi\n      .fetchTrendingMovies(page)\n      .then(({ results }) => {\n        if (results.length === 0) {\n          setStatus('rejected');\n        } else {\n          setStatus('pending');\n        }\n\n        setTrendingMovies(prevState => {\n          const filteredResult = [];\n          const stateMoviesId = prevState.map(obj => obj.id);\n          results.map(result => {\n            if (!stateMoviesId.includes(result.id)) {\n              filteredResult.push(result);\n            }\n            setStatus('approved');\n            return filteredResult;\n          });\n\n          return [...prevState, ...filteredResult];\n        });\n      })\n      .catch(error => console.log(error))\n      .finally();\n\n    trendingMoviesFetch();\n    Loading.remove();\n  }, [page]);\n\n  const loadMore = () => {\n    setPage(page + 1);\n  };\n\n  return (\n    <Section>\n      <Container>\n        <PageHeading text=\"Day`s Top\" />\n        {trendingMovies && (\n          <>\n            <MoviesList movies={trendingMovies} />\n            {status === 'approved' && (\n              <Btn text=\"Load more\" onclickHandler={loadMore} />\n            )}\n          </>\n        )}\n      </Container>\n    </Section>\n  );\n};\n\nexport default Home;\n"],"names":["MovieCardItem","styled","MovieTitle","MovieImg","movies","location","useLocation","map","id","poster_path","name","title","movieName","overview","imgSrc","noImage","idToString","toString","to","pathname","state","from","width","src","alt","loading","MoviesListStyled","useState","status","setStatus","trendingMovies","setTrendingMovies","page","setPage","isFirstRender","useRef","useEffect","current","moviesApi","then","results","length","prevState","filteredResult","stateMoviesId","obj","result","includes","push","catch","error","console","log","finally","Loading","text","onclickHandler"],"sourceRoot":""}