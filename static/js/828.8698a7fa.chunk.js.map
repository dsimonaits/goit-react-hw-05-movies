{"version":3,"file":"static/js/828.8698a7fa.chunk.js","mappings":"uKAAO,IAAMA,EACX,qG,mHCcF,EAXqB,WACnB,OAAwBC,EAAAA,EAAAA,UAAS,MAAK,eAA/BC,EAAI,KAAEC,EAAO,KACZC,GAAYC,EAAAA,EAAAA,MAAZD,QAMR,OAJAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAeH,GAASI,KAAKL,EAC/B,GAAG,CAACC,IAEGF,CACT,E,6BCXaO,EAAkBC,EAAAA,GAAAA,GAAS,4EAM3BC,EAAgBD,EAAAA,GAAAA,GAAS,uR,SCkBtC,EAtBkB,SAAH,GAAkB,IAAZE,EAAI,EAAJA,KAEnB,OACE,SAACH,EAAe,WACd,gCACGG,EAAKV,KAAKW,KAAI,YAA4C,IAAzCC,EAAY,EAAZA,aAAcC,EAAI,EAAJA,KAAMC,EAAS,EAATA,UAAWC,EAAE,EAAFA,GACzCC,EAAcJ,EALX,mCAK+CA,EAArBd,EAAAA,EACnC,OACE,UAACW,EAAa,YACZ,gBAAKQ,IAAKD,EAAYE,IAAKL,EAAMM,MAAM,SACvC,4BACE,uBAAIN,KACJ,uCAAeC,UAJCC,EAQxB,IAAE,QAKV,ECXA,EAXa,WACX,IAAMK,EAAUC,IAEhB,OACED,IACE,yBACE,SAAC,EAAS,CAACV,KAAMU,KAIzB,C,0LCXME,EAAU,mCAIT,SAAeC,IAAmB,+BAYxC,8CAZM,uGAA2C,OAARC,EAAI,+BAAG,EAAC,mBAEvBC,EAAAA,EAAAA,GAAM,qBAAsB,CACjDC,OAAQ,CACNC,QAASL,EACTE,KAAAA,KAED,KAAD,EALY,OAARI,EAAQ,yBAMPA,EAASlB,MAAI,gCAEpBmB,QAAQC,IAAI,EAAD,IAAQ,yDAEtB,wBAEM,SAAeC,EAAkB,GAAD,+BAWtC,8CAXM,WAAiC7B,GAAO,sGAEpBuB,EAAAA,EAAAA,GAAM,SAAD,OAAUvB,GAAW,CAC/CwB,OAAQ,CACNC,QAASL,KAEV,KAAD,EAJY,OAARM,EAAQ,yBAKPA,EAASlB,MAAI,gCAEpBmB,QAAQC,IAAI,EAAD,IAAQ,0DAEtB,sBAEM,SAAeE,EAAkB,GAAD,+BAYtC,8CAZM,WAAiC9B,GAAO,0FAAY,OAAVsB,EAAI,+BAAG,IAAG,mBAEhCC,EAAAA,EAAAA,GAAM,SAAD,OAAUvB,EAAO,YAAY,CACvDwB,OAAQ,CACNC,QAASL,EACTE,KAAAA,KAED,KAAD,EALY,OAARI,EAAQ,yBAMPA,EAASlB,MAAI,gCAEpBmB,QAAQC,IAAI,EAAD,IAAQ,yDAEtB,wBAEM,SAAezB,EAAe,GAAD,+BAWnC,8CAXM,WAA8BH,GAAO,sGAEjBuB,EAAAA,EAAAA,GAAM,SAAD,OAAUvB,EAAO,YAAY,CACvDwB,OAAQ,CACNC,QAASL,KAEV,KAAD,EAJY,OAARM,EAAQ,yBAKPA,EAASlB,MAAI,gCAEpBmB,QAAQC,IAAI,EAAD,IAAQ,0DAEtB,sBAEM,SAAeG,EAAkB,EAAD,kCAiBvC,aAJC,OAID,0BAjBO,WAAiCC,EAAOV,GAAI,sGAExBC,EAAAA,EAAAA,GAAM,eAAgB,CAC3CC,OAAQ,CACNC,QAASL,EACTY,MAAAA,EACAV,KAAAA,KAED,KAAD,EANY,OAARI,EAAQ,yBAOPA,EAASlB,MAAI,gCAEpBmB,QAAQC,IAAI,EAAD,IAAQ,0DAEtB,sBArEDL,EAAAA,EAAAA,SAAAA,QAAyB,+B","sources":["images/noImage.js","Hooks/useFetchCast.js","components/ActorList/ActorList.styled.js","components/ActorList/ActorList.jsx","pages/Cast.jsx","services/movies-api.js"],"sourcesContent":["export const noImage =\n  'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRY7RyB6wNXTa0DqKQeoBOoOu6_pqCbQmBqVQ&usqp=CAU';\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from 'services/movies-api';\n\nconst useFetchCast = () => {\n  const [cast, setCast] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    fetchMovieCast(movieId).then(setCast);\n  }, [movieId]);\n\n  return cast;\n};\n\nexport default useFetchCast;\n","import styled from 'styled-components';\n\nexport const ActorListStyled = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\n\nexport const ActorLIstItem = styled.li`\n  font-size: 12px;\n\n  flex-basis: calc((90% -6 * 10px) / 3);\n\n  @media screen and (min-width: 768px) {\n    flex-basis: calc((100% - 10 * 10px) / 5);\n  }\n  @media screen and (min-width: 1200px) {\n    flex-basis: calc((100% - 16 * 10px) / 8);\n  }\n`;\n","import { noImage } from 'images/noImage';\nimport { ActorListStyled, ActorLIstItem } from './ActorList.styled';\nimport PropTypes from 'prop-types';\n\nconst ActorList = ({ data }) => {\n  const imageUrl = 'https://image.tmdb.org/t/p/w500/';\n  return (\n    <ActorListStyled>\n      <>\n        {data.cast.map(({ profile_path, name, character, id }) => {\n          const actorPhoto = !profile_path ? noImage : imageUrl + profile_path;\n          return (\n            <ActorLIstItem key={id}>\n              <img src={actorPhoto} alt={name} width=\"100\"></img>\n              <div>\n                <p>{name}</p>\n                <p>Character: {character}</p>\n              </div>\n            </ActorLIstItem>\n          );\n        })}\n        ;\n      </>\n    </ActorListStyled>\n  );\n};\nexport default ActorList;\n\nActorList.propTypes = {\n  data: PropTypes.object.isRequired,\n};\n","import useFetchCast from 'Hooks/useFetchCast';\nimport ActorList from 'components/ActorList/ActorList';\n\nconst Cast = () => {\n  const credits = useFetchCast();\n\n  return (\n    credits && (\n      <ul>\n        <ActorList data={credits} />\n      </ul>\n    )\n  );\n};\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = '4c2c309e2c0263a8769257d39e3c269a';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport async function fetchTrendingMovies(page = 1) {\n  try {\n    const response = await axios('trending/movie/day', {\n      params: {\n        api_key: API_KEY,\n        page,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchMovieDetails(movieId) {\n  try {\n    const response = await axios(`movie/${movieId}`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchMovieReviews(movieId, page = '1') {\n  try {\n    const response = await axios(`movie/${movieId}/reviews`, {\n      params: {\n        api_key: API_KEY,\n        page,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchMovieCast(movieId) {\n  try {\n    const response = await axios(`movie/${movieId}/credits`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchMovieByQuery(query, page) {\n  try {\n    const response = await axios(`search/movie`, {\n      params: {\n        api_key: API_KEY,\n        query,\n        page,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n// http://api.themoviedb.org/3/search/movie?api_key=4c2c309e2c0263a8769257d39e3c269a&query=images\n\n// http://api.themoviedb.org/3/search/movie/?api_key=4c2c309e2c0263a8769257d39e3c269a&query=images\n"],"names":["noImage","useState","cast","setCast","movieId","useParams","useEffect","fetchMovieCast","then","ActorListStyled","styled","ActorLIstItem","data","map","profile_path","name","character","id","actorPhoto","src","alt","width","credits","useFetchCast","API_KEY","fetchTrendingMovies","page","axios","params","api_key","response","console","log","fetchMovieDetails","fetchMovieReviews","fetchMovieByQuery","query"],"sourceRoot":""}